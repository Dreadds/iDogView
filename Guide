Guide for iDogView

0 Step (Add the libraries, SwiftyJson, Alamofire, AloImage)

	Create:
	AboutDogsViewController -> UIViewController
	DogsViewController -> UICollectionViewController
	Assing all identifiers and Custom Class for all ViewControllers and Cell

1 Step (Endpoints)

Create a swift file on Network directory (DogApi)

Add the next code:

		class DogApi {
	    static let baseurl = "https://api.thedogapi.co.uk"
	    
	    public static var getDogs: String {
	        return "\(baseurl)/v2/dog.php"
	    }
	}

2 Step (Model)

		import SwiftyJSON

		class Dog {
		    var id: String
		    var url: String
		    var time: String
		    var format: String
		    var verified: String
		    var checked: String
		    
		    init(id: String, url: String, time: String, format: String, verified: String, checked: String) {
		        self.id = id
		        self.url = url
		        self.time = time
		        self.format = format
		        self.verified = verified
		        self.checked = checked
		    }
		    
		    convenience init (jsonDog: JSON) {
		        self.init(id: jsonDog["id"].stringValue,
		                  url: jsonDog["url"].stringValue,
		                  time: jsonDog["time"].stringValue,
		                   format: jsonDog["format"].stringValue,
		                  verified: jsonDog["verified"].stringValue,
		                  checked: jsonDog["checked"].stringValue)
		    }
		    
		    static func buildAll(from jsonDogs: [JSON]) -> [Dog] {
		        var dogs: [Dog] = []
		        let count = jsonDogs.count
		        for i in 0 ..< count {
		            dogs.append(Dog(jsonDog: jsonDogs[i]))
		        }
		        return dogs
		    }
		}

3 Step (Code Api for console)

		On the file "DogsViewController.swift" add :

			func testConnectivity() {
	        Alamofire.request(DogApi.getDogs)
	        .validate()
	        .responseJSON(completionHandler: { response in
	            switch response.result {
	            case .success(let value):
	                let json = JSON(value)
	                print(json)
	                let error = json["status"].stringValue
	                if error != "null"{
	                    let dogs = Dog.buildAll(from: json["data"].arrayValue)
	                    print("Found \(dogs.count) Dogs")
	                }
	            case .failure(let error):
	                print("Networking Error: \(error.localizedDescription)")
	            }
	            
	        })
	    }

	And add the funcion on 

		override func viewDidLoad() {
        super.viewDidLoad()
        testConnectivity()     
    }

4 Step (Api show data)

		On the file "DogsViewController" below "private let reuseIdentifier = "Cell"" add :

			class DogsCell: UICollectionViewCell { (Assign the cell with its Custom Class)
			    @IBOutlet var pictureImageView: UIImageView!
			    
			    func updateViews(from dog: Dog) {
			        if let url = URL(string: dog.url){
			            pictureImageView.af_setImage(withURL: url)
			        }
			    }
			}

		Below the "class DogsViewController: UICollectionViewController" add :
			var dogs: [Dog] = []

		numberOfSections -> return 1
		collectionView -> return dogs.count
		collectionView -> as! DogsCell

		// Configure the cell
        cell.updateViews(from: dogs[indexPath.row])
        return cell

        for last one add on api code:
        	self.dogs = Dog.buildAll(from: json["data"].arrayValue)
            self.collectionView!.reloadData()


